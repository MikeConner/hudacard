-# Display running game, after bet placed
-# Displayed for a "new" game -- no bet yet
.container
  .row
    .small-12.large-4.columns
      .row.small-12.large-12.columns
        .panel
          = render :partial => 'games/header', :locals => {:game => @game}
          - range = @game.user.bet_range
          = hidden_field_tag :min_bet, range[:min]
          = hidden_field_tag :max_bet, range[:max]
        
      .row.small-12.large-12.columns
        = render :partial => 'games/fund_account'
      .row
        .small-12.large-12.columns
          .panel
            = render :partial => 'games/balance', :locals => { :satoshi_balance => @old_balance }
      .row
        .small-12.large-12.columns
          .panel
            .row
              %h2 Jokers:
              .small-6.large-6.columns
                %card.card.card-1-joker
              .small-6.large-6.columns
                %card.card.card-2-joker

    .small-12.large-8.columns
      .row
        .small-12.lage-12.columns
          .panel.callout.radius
            %h3 You bet #{@game.bet} m฿ on #{@game.color}
            #announcer
              %h3 Good Luck
            - notes = @game.mid_game_notes
            %h3
              .midgame#announcer2= notes[0]
            %h3
              .midgame#announcer3= notes[1]
            %h3
              .midgame#announcer4= notes[2]
            #winbox
              - if @game.payout != 0
                = hidden_field_tag :payout, (@game.payout * 100000).round
              - if @game.payout > 0
                %h3 WIN
              - else
                %h3 LOSE
              %h3= @game.ratio.round(1).to_s + "X"
              %h5= @game.payout.round(1).to_s + "m฿"
            

      .row
        .small-12.large-12.columns.panel.rounded-top-corners.shadowed
          - for i in 1..5 do
            .small-2.large-2.columns.cardarea
              .card.card-back{:id => "card#{i}"}
              %cardfront{:id => "seq#{i}", :class => "card card-#{@cards[i-1].value}-#{@cards[i-1].suit.downcase}"}
          .small-2.large-2.columns.cardarea

        .small-6.large-6.columns.panel
          .hash#hash
            Key for this game:
            = @game.security_code
        .small-6.large-6.columns.panel
          MD5 Hash for next game:
          = @new_game.game_key

      .row
        .small-12.large-12.columns
          .panel
            = form_for @new_game do |f|
              = render :partial => 'games/bet_fields', :locals => { :f => f, :game => @new_game }
    

= render :partial => 'games/qrcode'
= render :partial => 'games/footer'
:javascript
  var BALANCE_SPEED = 3000;

  $(document).ready(function() {
  var wait = 1000;
  
  // Result box WIN/LOSE
  $('#winbox').hide()
  $('#hash').hide();

  
  // Fronts of the cards
  $('cardfront').hide();
  
  // Mid-game notes
  $('.midgame').hide();

  // Show first card
  $('#seq1').show();
  $('#card1').hide();
  $('#announcer').delay(wait).fadeOut(0);
  for (var idx = 2; idx <= 5; idx++) {
    $('#seq' + idx).delay(wait * (idx - 1)).fadeIn(wait);
    $('#card' + idx).delay(wait * (idx - 1)).fadeOut(0);
  }

  for (var idx = 2; idx <= 4; idx++) {
    $('#announcer' + idx).delay(wait * (idx - 1)).fadeIn(wait);
    $('#announcer' + idx).delay(0).fadeOut(0);    
  }
  
    $('#winbox').delay(wait * 4).fadeIn(wait);
    $('#hash').delay(wait * 4).fadeIn(wait);
    
    setTimeout(updateBalance, wait * 5);
  });

  function updateBalance() {
    var satBal = parseInt($('#satoshibalance').text());
    var satPay = parseInt($('#payout').val());
    var btcBalNew = (satPay + satBal) / 100000;
         
    if (!(isNaN(satPay) || (0 == satBal))) {
        $('#btcbalance').text(btcBalNew + " m฿");
        if (satPay < 0){
          $('#satoshibalance').text(satBal + satPay);
        }
        else {
          $('#satoshibalance').countTo({
                      from: satBal,
                      to: satBal + satPay,
                      speed: BALANCE_SPEED,
                      refreshInterval: 50,
                      onComplete: function(value) { console.debug(this);}
                    });
        }
    }
  }
